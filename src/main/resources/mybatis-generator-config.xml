<?xml version="1.0" encoding="UTF-8"?>
<!-- mybatis的代码生成器相关配置 -->
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!-- 引入外部配置文件 -->
    <properties resource="application-generator.properties" />

    <!-- 一个数据库一个context,context的子元素必须按照以下给出的个数、顺序配置
            property (0..N),plugin (0..N),commentGenerator (0 or 1),
            jdbcConnection (需要connectionFactory 或 jdbcConnection),
            javaTypeResolver (0 or 1),javaModelGenerator (至少1个),
            sqlMapGenerator (0 or 1),javaClientGenerator (0 or 1),
            table (1..N)-->
    <context id="myContext" targetRuntime="MyBatis3">

        <!-- 插件 -->
        <plugin type="org.mybatis.generator.plugins.RowBoundsPlugin">

        </plugin>

        <!-- 注释 -->
        <commentGenerator>
            <!-- 是否不生成注释 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}">
            <!--高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true-->
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>

        <!-- 类型转换 -->
        <javaTypeResolver >
            <!--是否使用 bigDecimal，默认false。
                false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
                true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal-->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="xyz.xjydev.community.model" targetProject="src/main/java">
            <!-- 是否让schema作为包的后缀，默认为false -->
            <property name="enableSubPackages" value="true" />
            <!-- 是否针对string类型的字段在set方法中进行修剪，默认false -->
            <property name="trimStrings" value="true" />
        </javaModelGenerator>

        <!-- 生成Mapper.xml文件 -->
        <sqlMapGenerator targetPackage="mapper"  targetProject="src/main/resources">
            <!-- 是否让schema作为包的后缀，默认为false -->
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>

        <!-- 生成XxxMapper.java文件
            type="XMLMAPPER" 会将接口的实现放在 mapper.xml中，也推荐这样配置。
            也可以设置 type 为其他值，比如 type="ANNOTATEDMAPPER"，接口的实现通过注解写在接口上面 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="xyz.xjydev.community.mapper"  targetProject="src/main/java">
            <!-- 是否让schema作为包的后缀，默认为false -->
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- schema为数据库名，oracle需要配置，mysql不需要配置。
            tableName为对应的数据库表名
            domainObjectName 是要生成的实体类名(可以不指定)
            enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询，不想要可以设为false
            -->
        <table schema="" tableName="user" domainObjectName="User" >
<!--               enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="false"-->
<!--               enableUpdateByExample="false" selectByExampleQueryId="false">-->
            <!--是否使用实际列名,默认为false-->
            <!--<property name="useActualColumnNames" value="false" />-->
        </table>
        <table tableName="question" domainObjectName="Question">

        </table>

    </context>
</generatorConfiguration>
